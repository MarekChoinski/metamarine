@use "styles/variables" as *;
@use "sass:math";

.container {
  width: 100vw;
  background-color: black;
  box-sizing: border-box;
  padding-bottom: 10rem;
}

@keyframes gradient {
  0% {
    background-position: 0% 0%;
  }
  50% {
    background-position: 100% 100%;
  }
  100% {
    background-position: 0% 0%;
  }
}

.header {
  font-size: 3rem;
  text-align: center;
  margin: 0;
  padding: 0 0 12rem 0;
  font-weight: 500;

  background: linear-gradient(
    45deg,
    hsl(324, 100%, 50%),
    rgb(5, 222, 218),
    hsl(324, 100%, 50%)
  );
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-size: 400% 400%;
  animation: gradient 15s ease infinite;
}

.dual {
  max-width: $containerWidth;
  display: flex;
  height: auto;
  color: white;
  margin: 0 auto;
}

.text {
  width: 40%;
  padding-right: 2rem;
  h1 {
    // @extend .header;
    padding: 0;
    font-size: 2rem;
    text-align: left;
    background: linear-gradient(
      45deg,
      hsl(324, 100%, 50%),
      rgb(5, 222, 218),
      hsl(324, 100%, 50%)
    );
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400% 400%;
    animation: gradient 10s ease infinite;
  }

  p {
    margin-top: 2rem;
    line-height: 2;
    font-size: 1rem;
    font-family: Arial, Helvetica, sans-serif;
    background: none;
    color: white;
  }
}

// ANIMATION

.fadecycle {
  width: 60%;
  // margin: 3rem auto;
  padding-left: 6rem;
  position: relative;

  img {
    opacity: 0;

    width: 100%;
    height: auto;
    position: absolute;
    top: 0;
    -webkit-animation-name: fade;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-duration: 6s;
    animation-name: fade;
    animation-iteration-count: infinite;
    animation-duration: 6s;
  }
}

// Animation settings
$totalTime: 20s;
$items: 10;
$animationSpeed: 1;

// Calculate animation time in seconds (how long the fade lasts)
$animationTime: 0s + $totalTime / ($items * $animationSpeed * 2);
// Calculate show time in seconds (how long the element is displayed)
$showTime: (0s + $totalTime - ($animationTime * $items)) / $items;

// Set animation for each element
@for $i from 1 through $items {
  .fadecycle > *:nth-child(#{$i}) {
    // Delay is increased for each item
    // Starting with an offset of -$animationTime so the first element is displayed on load
    $delay: -$animationTime + ($animationTime + $showTime) * ($i - 1);
    animation: fadeinout $totalTime linear $delay infinite;
  }
}

// Calculate percentages of the display time for keyframes
$animationPercentage: 0% + 100 * (math.div($animationTime, $totalTime));
$showPercentage: 0% + 100 * (math.div($showTime, $totalTime));

@keyframes fadeinout {
  0% {
    opacity: 0;
  }
  #{$animationPercentage},
  #{$animationPercentage + $showPercentage} {
    opacity: 1;
  }
  #{$showPercentage + $animationPercentage * 2},
  100% {
    opacity: 0;
  }
}
